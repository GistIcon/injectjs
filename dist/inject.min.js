/*! inject-js - v0.4.13 - 2016-04-09
* https://github.com/nstraub/injectjs
* Copyright (c) 2016 ; Licensed  */
"use strict";var injector=function(a){function b(){this.types={},this.providers={},this.fakes={},this.state={}}function c(b,d,e){var f,g,h;if(f=b.parent){g=b.descriptor.name||b.descriptor.type,h=f.descriptor.name,e.unshift(g);var i=f.descriptor.provider;if(a.isArray(i)&&(i=i[i.length-1]),i!==g&&~d.indexOf(h))throw"Circular Reference Detected: "+h+" -> "+e.join(" -> ")+" -> "+h;c(f,d,e)}}function d(b,c,d,e){var f=this;return c=c||{},a.map(b,function(a,b){if(a)return a.call(f,c,d);if(c.hasOwnProperty(b))return c[b];if(e.strict_dependency_providers)throw'There is no dependency named "'+b+'" registered.';return null})}function e(a){if(!~f.indexOf(a))throw'invalid lifetime "'+a+'" provided. Valid lifetimes are singleton, transient, instance and parent'}b.prototype.DEFAULT_LIFETIME="transient",b.prototype.cache={},b.prototype.roots={},b.prototype.currentHashCode=1,b.prototype.strict_dependency_providers=!0;var f=["singleton","transient","root","parent","state"],g=window.injector;b.prototype._build_anonymous_descriptor=function(a){return"function"==typeof a?{type:a,dependencies:j(a)}:{type:a[a.length-1],dependencies:a.slice(0,a.length-1)}};var h=function(a,b){return a.parent===b?a:b||a};b.prototype._inject=function(b,d,e,f){var g,i,j,k=this;if(!d){if(e)return null;throw'There is no dependency named "'+b+'" registered.'}if(i={},i.hashCode=++this.currentHashCode,i.descriptor=d,i.parent=e||null,i.root=f||i,b=d.name,this.cache[b]&&this.cache[b].hashCode===d.hashCode)return function(a,c){var d=k.cache[b]||k.inject(b);return d.call(this,a,h(i,c))};if(f&&d.dependencies&&c(i,d.dependencies,[]),f=i.root,j=d.provider,j&&(a.isArray(j)&&(j=j[j.length-1]),!e||j!==e.descriptor["string"==typeof j?"name":"type"])){var l=this._get_descriptor(d.provider);return l.dependencies.shift(),l.dependencies.unshift(b),this._inject(j,l,i,f)}g={};var m=0;a.each(d.dependencies,a.bind(function(a){var b=this._inject(a,this._get_descriptor(a),i,f);g[a]?g[a+m++]=b:g[a]=b},this)),i.providers=g;var n=this._build_provider(i);return n.template=i,function(a,c){var d=n.hashCode===k._get_descriptor(b).hashCode?n:k.inject(b);return d.call(this,a,h(i,c))}},b.prototype._get_descriptor=function(a){return"string"==typeof a?this.fakes[a]||this.types[a]||this.providers[a]:"undefined"==typeof a?{}:this._build_anonymous_descriptor(a)},b.prototype.inject=function(a){return this._inject(a,this._get_descriptor(a))},b.prototype.get=function(a,b,c){var d=this.inject(a);return b?d.call(b,c):d(c)},b.prototype.run=function(a,b){if(!this.providers.main)throw"No main method registered. Please register one by running injector.registerMain() before running the app";return this.get("main",a,b)};var i=Object.create;b.prototype._provide_transient=function(a){var b=a.descriptor.type,c=a.providers,e=this;return function(a,f){var g=i(b.prototype);return b.apply(g,d.call(this,c,a,f,e)),g}},b.prototype._provide_cached=function(a,b){var c=a.descriptor.name;if(!b[c]){var d=this._provide_transient(a);b[c]=function(a){var e;return"function"==typeof d&&(d=d.call(this,a),e=function(){return d},e.hashCode=b[c].hashCode,b[c]=e),d}}return b[c]},b.prototype._provide_root=function(a){var b=a.descriptor.name,c=this;return function(d,e){var f=e.root.roots=e.root.roots||{};return f[b]||(f[b]=c._provide_transient(a).call(this,d,e)),f[b]}},b.prototype._provide_provider=function(a){var b=this;return function(c,e){var f=d.call(this,a.providers,c,e,b);return a.descriptor.type.apply(this,f)}},b.prototype._provide_parent=function(a){var b=this;return function(c,d){for(var e=d,f=e,g=a.descriptor.name;e=e.parent;){if(e.children&&e.children[g]){f=e;break}e.descriptor.dependencies&&~e.descriptor.dependencies.indexOf(g)&&(f=e)}return e=f,e.children=e.children||{},e.children[g]&&"building"!==e.children[g]||(e.children[g]="building",e.children[g]=b._provide_transient(a).call(this,c,d)),e.children[g]}},function(){var a={};window.jasmine&&jasmine.getEnv&&jasmine.getEnv().addReporter({specStarted:function(){a={}}}),b.prototype._build_provider=function(b){var c,d,e=b.descriptor,f=e.name,g=null;if(e.lifetime)switch(e.lifetime){case"singleton":d="provide_cached",g=a;break;case"state":d="provide_cached",g=this.state;break;default:d="provide_"+e.lifetime}else d="provide_provider";return c=this["_"+d](b,g),c.hashCode=e.hashCode,f&&!e.provider&&(this.cache[f]=c),c}}(),b.prototype.registerType=function(a,b,c,d){if(c=c||this.DEFAULT_LIFETIME,e(c),"singleton"===c&&this.cache[a])throw"you cannot re-register a singleton that has already been instantiated";this._register("types",a,b,c),d&&(this.types[a].provider=d)},b.prototype.registerProvider=function(a,b){this._register("providers",a,b)},b.prototype.registerMain=function(a){this._register("providers","main",a)},b.prototype.registerFake=function(a,b,c,d){c=c||this.DEFAULT_LIFETIME,e(c),this._register("fakes",a,b,c),d&&(this.fakes[a].provider=d)},b.prototype._register=function(a,b,c,d){var e,f,g;if("types"!==a&&"providers"!==a&&"fakes"!==a)throw'invalid destination "'+a+'" provided. Valid destinations are types, providers and fakes';if(g=this[a],"string"!=typeof b||""===b)throw"Type must have a name";if(!c)throw"no type was passed";if("function"==typeof c)f=c.$inject||c.prototype.$inject||j(c),e=c;else{if(!Array.isArray(c))throw"type must be a function or an array";if(e=c[c.length-1],c.$inject||e.$inject)throw"passed type cannot have both array notation and the $inject property populated";f=c.slice(0,c.length-1)}if("function"!=typeof e)throw"no type was passed";this.cache[b]&&delete this.cache[b],g[b]={name:b,type:e,dependencies:f,lifetime:d,hashCode:this.currentHashCode++}},b.prototype.harness=function(a){var b=this;return function(c){return b.inject(a)(c)}},b.prototype.removeFake=function(a){delete this.fakes[a]},b.prototype.flushFakes=function(){this.fakes={}};var j=function(){var a=/^function ?\w* ?\(((?:\w+|(?:, ?))+)\)/,b=/, ?/;return function(c){var d,e=c.toString();return(d=a.exec(e))?d[1].split(b):null}}();b.prototype.getType=function(a){var b=this.fakes[a]||this.types[a];return b?b.type:null},b.prototype.extend=function(a,b){var c=this.types[a];if(!c)throw'No type "'+a+'" found.';if("transient"!==c.lifetime)throw"Only transient lifetime types are allowed for now";b.prototype=this.get(a)},b.prototype.noConflict=function(){window.injector=g},b.prototype.clearState=function(){var b=this;a.each(this.state,function(a,c){b.cache[c]&&delete b.cache[c]}),this.state={}};var k=new b;window.angular&&angular.module&&angular.module("injectJS",[]).factory("$injectJS",[function(){return k}]).run(["$rootScope","$injectJS",function(a,b){a.$on("$locationChangeStart",function(){b.clearState()}),b.removeDefaultListener()}]);var l=function(){k.clearState()};return window.addEventListener("hashchange",l),b.prototype.removeDefaultListener=function(){window.removeEventListener("hashchange",l)},k}(_);